// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model sample {
  id    String @id @db.VarChar(100)
  name  String @db.VarChar(100)
  description String? @db.Text()
}

model Customer {
  id    String @id
  name  String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  phone String @db.VarChar(100) @unique
  wallet Wallet?
  comments Comment[]
  likes Like[]

  @@map("customers")
}

model Comment {
  id  Int @id @default(autoincrement())
  customer_id String @db.VarChar(100)
  title String @db.VarChar(200)
  description String? @db.Text

  customer Customer @relation(fields: [customer_id], references: [id])
  @@map("comments")
}

model Wallet {
  id        String  @db.VarChar(100)
  balance   Int     @db.Int
  customer_id String @unique @db.VarChar(100)
  customer Customer @relation(fields: [customer_id], references: [id])

  @@map("wallet")
}

model Product {
  id    String @id
  name  String @db.VarChar(100)
  price Int
  stock Int
  category  String @db.VarChar(100)
  likedBy Like[]

  @@map("products")
}

model Category {
  id    Int       @id @default(autoincrement())
  name  String    @db.VarChar(100)
  
  @@map("categories")
}

model Like {
  customer_id String @db.VarChar(100)
  product_id String @db.VarChar(100)
  
  customer Customer @relation(fields: [customer_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@id([customer_id, product_id])
  @@map("likes")
}